/**
 * @file
 * @brief This file implements various utility functions that are
 * can be used by the storage server and client library.
 */

#define _XOPEN_SOURCE

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include "utils.h"


 int sendall(const int sock, const char *buf, const size_t len)
 {
    size_t tosend = len;
    while (tosend > 0)
    {
        ssize_t bytes = send(sock, buf, tosend, 0);
        if (bytes <= 0)
            break; // send() was not successful, so stop.
        tosend -= (size_t) bytes;
        buf += bytes;
    };

    return tosend == 0 ? 0 : -1;
}


/**
 * @brief In order to avoid reading more than a line from the stream,
 * this function only reads one byte at a time.  This is very
 * inefficient, and you are free to optimize it or implement your
 * own function.
 */
 int recvline(const int sock, char *buf, const size_t buflen)
 {
    int status = 0; // Return status.
    size_t bufleft = buflen;

    while (bufleft > 1)
    {
        // Read one byte from scoket.
        ssize_t bytes = recv(sock, buf, 1, 0);
        if (bytes <= 0)
        {
            // recv() was not successful, so stop.
            status = -1;
            break;
        }
        else if (*buf == '\n')
        {
            // Found end of line, so stop.
            *buf = 0; // Replace end of line with a null terminator.
            status = 0;
            break;
        }
        else
        {
            // Keep going.
            bufleft -= 1;
            buf += 1;
        }
    }
    *buf = 0; // add null terminator in case it's not already there.

    return status;
}


/**
 * @brief Parse and process a line in the config file.
 */
 int process_config_line(char *line, struct config_params *params)
 {
    // Ignore comments.
    if (line[0] == CONFIG_COMMENT_CHAR)
        return 0;

    // Extract config parameter name and value.
    char parameter[MAX_CONFIG_LINE_LEN] = {0};
    char value[MAX_CONFIG_LINE_LEN] = {0};
    char trash[MAX_CONFIG_LINE_LEN] = {0};

    char columns[MAX_CONFIG_LINE_LEN] = {0};
    char* cur_column = NULL;
    char column_name[MAX_COLNAME_LEN] = {0};
    char data_type[MAX_STRTYPE_SIZE] = {0};


    int items = sscanf(line, "%s %s %[^\n]", parameter, value, columns);

    if (strcmp(parameter, "table") == 0) // Processing a table
    {
        if(check_special(value) == false) // Table name contains special characters?
            return 1;
        
        // Check if table name already in table list
        int i;
        for(i = 0; i < params->num_tables; i++)
            if(strcmp(params->table_schemas[i].table_name, value) == 0)
                return 1;

        params->table_schemas[params->num_tables].num_columns = 0; // Initialize number of columns for current table

        // Add to list of table names 
        strcpy(params->table_schemas[params->num_tables].table_name, value);

        // Table name comparion done

        if(items < 3) // No column names 
            return 1;

        else if(columns[0] == ',') // First character is a comma
            return 1;
        
        cur_column = strtok(columns, ","); // Get tokens from a string delimited with commas
        while (cur_column != NULL)
        {
            // Format from design specifications (spaces before and after commas are allowed)
            if(sscanf(cur_column, " %[a-zA-Z0-9]:%[intchar0-9[]%s", column_name, data_type, trash) != 2)
                if(trash[0] != ']')
                    return 1;

            // Check if column name already in column list
                int i;
                for(i = 0; i < params->table_schemas[params->num_tables].num_columns; i++)
                    if(strcmp(params->table_schemas[params->num_tables].column_names[i], column_name) == 0)
                        return 1;

            // Add to list of column names 
                    strcpy(params->table_schemas[params->num_tables].column_names[params->table_schemas[params->num_tables].num_columns], column_name);


            if(strcmp(data_type, "int") == 0) // Integer
                params->table_schemas[params->num_tables].data_types[params->table_schemas[params->num_tables].num_columns] = 0;
            else
            {
                sscanf(data_type, "char[%d", &(params->table_schemas[params->num_tables].data_types[params->table_schemas[params->num_tables].num_columns])); // Character array (string)
                // Size of string cannot be less than 1
                    if(params->table_schemas[params->num_tables].data_types[params->table_schemas[params->num_tables].num_columns] < 1 ||
                        params->table_schemas[params->num_tables].data_types[params->table_schemas[params->num_tables].num_columns] > MAX_STRTYPE_SIZE)
                        return 1;
                }

            // Increment number of columns
                params->table_schemas[params->num_tables].num_columns++;

                cur_column = strtok (NULL, ",");
            }

        // Increment number of tables
            params->num_tables++;

        }
    // Line wasn't as expected.
        else if (items != 2)
            return 1;
        else if (strcmp(parameter, "server_host") == 0)
        {
        // Checking if server_host already entered, then invalid config file
            if(params->server_host[0] == '\0')
                strncpy(params->server_host, value, sizeof params->server_host);
            else
                return 1;
        }
        else if (strcmp(parameter, "server_port") == 0)
        {
            
        // Checking if server_port already entered, then invalid config file
        // Checking port range
            if(params->server_port == -1 && atoi(value) > 1023 && atoi(value) < 65536)
                params->server_port = atoi(value);
            else
                return 1;
        }
        else if (strcmp(parameter, "username") == 0)
        {
        // Checking if server_username already entered, then invalid config file
            if(params->username[0] == '\0')
                strncpy(params->username, value, sizeof params->username);
            else
                return 1;
        }
        else if (strcmp(parameter, "password") == 0)
        {
        // Checking if server_password already entered, then invalid config file
            if(params->password[0] == '\0')
                strncpy(params->password, value, sizeof params->password);
            else
                return 1;
    }// else if (strcmp(name, "data_directory") == 0) {
    //	strncpy(params->data_directory, value, sizeof params->data_directory);
    //}
        else
            return 1;

        return 0;
    }


    int read_config(const char *config_file, struct config_params *params)
    {
        int error_occurred = 0;

    // Open file for reading.
        FILE *file = fopen(config_file, "r");
        if (file == NULL)
            error_occurred = 1;

    // Process the config file.
        while (!error_occurred && !feof(file))
        {
        // Read a line from the file.
            char line[MAX_CONFIG_LINE_LEN] = {0};
            char *l = fgets(line, sizeof line, file);

        // Process the line.
            if (l == line)
                error_occurred = process_config_line(line, params);
            else if (!feof(file))
                error_occurred = 1;
        }

    // Checking if no tables specified in config file
        if(params->num_tables == 0)
            error_occurred = 1;

        return error_occurred ? -1 : 0;
    }

    void logger(FILE *file, char *message)
    {

        if(file == NULL)
            return;

        fprintf(file, "%s", message);
        fflush(file);
    }


    char *generate_encrypted_password(const char *passwd, const char *salt)
    {
        if(salt != NULL)
            return crypt(passwd, salt);
        else
            return crypt(passwd, DEFAULT_CRYPT_SALT);
    }


    char *generate_logfile(char *file_name)
    {

        char curr_time[MAX_LOG_NAME] = {0};
        time_t rawtime;
        struct tm * timeinfo;

        time (&rawtime);
        timeinfo = localtime (&rawtime);

        strftime(curr_time, MAX_LOG_NAME, "-%F-%H-%M-%S.log", timeinfo);
        return strcat(file_name, curr_time);
    }


    bool check_special(const char* buf)
    {
        int i;
        for(i = 0; i < strlen(buf); i++)
            if(!isalnum(buf[i]) && !isspace(buf[i]))
                return false;
            return true;
        }

        bool check_value(const char* check)
        {
    if(check[0] == ',') // First character is a comma
        return false;
    else if(strcmp(check, "NULL") == 0)
        return true;

    char buf[MAX_VALUE_LEN] = {0};
    strcpy(buf, check);
    char column_name[MAX_COLNAME_LEN] = {0};
    char str_data[MAX_VALUE_LEN] = {0};
    int int_data;
    char trash[MAX_CONFIG_LINE_LEN] = {0};

    char* cur_column = strtok(buf, ",");
    while(cur_column != NULL)
    {
        if(sscanf(cur_column, " %[a-zA-Z0-9] %d%s", column_name, &int_data, trash) != 2)
            if(sscanf(cur_column, " %[a-zA-Z0-9] %[a-zA-Z0-9 ]%s", column_name, str_data, trash) != 2)
                return false;
            cur_column = strtok(NULL, ",");
        }

        return true;
    }

    int make_key(char* buf)
    {
        int i, j = 0, length = strlen(buf);
        char new_buf[MAX_VALUE_LEN] = {0};

        for(i = 0; i < length; i++)
            if(isalnum(buf[i]))
                new_buf[j++] = buf[i];

            strcpy(buf, new_buf);

            return 0;
        }

        int make_value(char* buf)
        {
         int i, j = 0, length = strlen(buf);
         char new_buf[MAX_VALUE_LEN] = {0};
         for(i = 0; i < length; i++)
             if(isalnum(buf[i]) || isspace(buf[i]))
                 new_buf[j++] = buf[i];
             strcpy(buf, new_buf);
             return 0;
         }


         bool check_predicates(const char* check)
         {
    if(check[0] == ',') // First character is a comma
        return false;

    char buf[MAX_VALUE_LEN] = {0};
    strcpy(buf, check);

    char column_name[MAX_COLNAME_LEN] = {0};
    char operator;
    char str_data[MAX_VALUE_LEN] = {0};
    int int_data;

    char trash[MAX_CONFIG_LINE_LEN] = {0};

    char* cur_pred = strtok(buf, ",");
    while(cur_pred != NULL)
    {
        if(sscanf(cur_pred, " %[a-zA-Z0-9] %1[<=>] %d%s", column_name, &operator, &int_data, trash) != 3)
            if(sscanf(cur_pred, " %[a-zA-Z0-9] %1[=] %[a-zA-Z0-9 ]%s", column_name, &operator, str_data, trash) != 3)
                return false;
        cur_pred = strtok(NULL, ",");
    }

        return true;
    }


    void populate_keys(char** key_array, const int max_keys, const char* protocoled_keys)
    {
        char buf[max_keys * MAX_KEY_LEN];
        memset(buf, 0, sizeof buf);
        strcpy(buf, protocoled_keys);
        
        int counter = 0;

        char* cur_key = strtok(buf, ",");
        while(cur_key != NULL && counter < max_keys)
        {
            sscanf(cur_key, "%s", key_array[counter]);
            cur_key = strtok(NULL, ",");
            counter++;
        }
    }
